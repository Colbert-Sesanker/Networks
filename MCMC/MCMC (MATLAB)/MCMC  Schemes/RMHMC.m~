function  RMHMC(Model)

% Start the timer for burn-in samples
tic
% Print variable output to terminal in real time
more off; 
% Note: state variables are called 'species'
% Y is the experimental data we are trying to fit
Y = Model.noisyData;
[numStates, numTimePts] = size(Y);


% Set Model specifications
% Observed and unobserved species are vectors
% with indexes of state variables
% 'Equations' is a function handle of ODE and
% sensitivity equations
% sampled parameters are the parameters 
% that will be sampled with MCMC
% numSampledParams is the # of parameters
% used in MCMC sampling
numSampledParams                   = Model.numSampledParams;
numTotalParams                     = Model.numTotalParams;
observedStates                     = Model.observedStates;
unobservedStates                   = Model.unobservedStates;
totalStates                        = length(observedStates) + ...
                                     length(unobservedStates);
addedNoise_SD                      = Model.addedNoise_SD;
equations                          = Model.equations;
equations_AD                       = Model.equations_AD;
sensitivityMethod                  = Model.sensitivityMethod;
initialValues                      = Model.initialValues;

% for sensitivities
if strcmp(sensitivityMethod, 'analytic (symbolic)')    
    equationsSens                  = Model.equationsSens;
    initialValuesSens              = Model.initialValuesSens;
else
    equationsSens                  = {};
    initialValuesSens              = [];
end

numLeapFrogSteps                   = Model.numLeapFrogSteps;
stepSize                           = Model.stepSize_RMHMC;
maxFixedPointStepsMomentum         = Model.maxFixedPointStepsMomentum; 
maxFixedPointStepsPosition         = Model.maxFixedPointStepsPosition;  
stepSizeRange                      = Model.stepSizeRange; 

burnin                             = Model.burnin;
numPosteriorSamples                = Model.numPosteriorSamples;
equationName                       = Model.equationName;
totalParams                        = Model.totalParams;
timePoints                         = Model.timeData;
numTimePoints                      = length(timePoints);
zeroMetricTensorDerivatives        = Model.zeroMetricTensorDerivatives;
plotProposedTrajectories           = Model.plotProposedTrajectories;

sampledParam_idxs                  = Model.sampledParam_idxs;
epsilon                            = Model.epsilon;

% Model specific priors:
% Prior struct of priors and derivatives
% Objective priors throw exceptions when parameters reach
% regions of zero probability
Prior                   = Model.Prior;


% Used in calculating prior probabilities of current and proposed parameters
prior                   = Prior.prior;
% Used in computing natural gradient of posterior
priorDerivative         = Prior.priorDerivative;

% Used in computing the metric tensor of posterior
priorSecondDerivative   = Prior.priorSecondDerivative;
% Used in computing the derivative of metric tensor in Laplace
% Beltrami Operator
priorThirdDerivative    = Prior.priorThirdDerivative; 

sampledParams           = totalParams(sampledParam_idxs);
calculateTensor         = ~ Model.isHMC;

% Set up noise for likelihood function
% Fix noise - CurrentNoise is the variance
% Note: we are cheating here the noise of 
% the likelihood is set to  noise added to the  
% synthetic data
% if SDNoise is a scalar, the same noise is added to each 
% species. Otherwise assume it's a vector of noises for
% each species. Technically the noise can be a matrix for
% each time point for each species
if isscalar(addedNoise_SD)
    currentNoise = ones(1, numStates) * addedNoise_SD^2;
end

% Default step size is: 1 /  (number of covariates) ^ (- 1/3)
if strcmp(stepSize, 'default')
    stepSize = numSampledParams^(- 1/3);
end  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Define Functions for calculations                                       %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    

function [invGdG, traceInvGdG] = calcInvGdG_terms(invG, deriv_G,...
                                                  numSampledParams)  
        for k = 1: numSampledParams
            invGdG{k}        = invG * deriv_G{k};
            traceInvGdG(k)   = trace(invGdG{k});     
        end                
end   

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Calculate metric-tensor, gradient, etc. about maximum likelihood        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
                          
% calculate 1st and 2nd order sensitivities
[trajectories,      ...
 sensitivities_1,   ...
 sensitivities_2] = ...
                    ...
              getSensAndTrajectories...
                                    ...
                        ( sensitivityMethod,   zeroMetricTensorDerivatives,...
                          equations,           equations_AD,               ...  
                          equationsSens,                                   ... 
                          initialValues,       initialValuesSens,          ...
                          timePoints,          numStates,                  ...  
                          numSampledParams,    totalParams,                ...
                          sampledParam_idxs,   epsilon                     ...                                 
                        );
                                   
speciesEstimates  = extractSpeciesTrajectories(trajectories,...
                                               numStates);                                                 

currentGrad_LL = LL_Gradient(...
                              sampledParams,    sensitivities_1,... 
                              numSampledParams, observedStates,...
                              numTimePts,       speciesEstimates,... 
                              Y,                currentNoise,...
                              priorDerivative...
                            );

% Standard MALA without any gradient information
if Model.isHMC           
      currentG           = eye(numSampledParams);
      currentInvG        = currentG;
      for k = 1: numSampledParams
            currentInvGdG{k}    =  zeros(numSampledParams,...
                                         numSampledParams);
      end       

            currentTraceInvGdG  =  zeros(1, numSampledParams);             
      
    
elseif calculateTensor
    currentG = metricTensor(...
                              sampledParams,    sensitivities_1,... 
                              numSampledParams, observedStates, ... 
                              currentNoise,     priorSecondDerivative...                              
                           );

    identity           = eye(numSampledParams);                                     
    currentInvG        = identity / (currentG + identity*1e-6);
    G                  = currentG;
    invG               = currentInvG; 

    if zeroMetricTensorDerivatives

        for k = 1: numSampledParams
            currentInvGdG{k}    =  zeros(numSampledParams,...
                                         numSampledParams);
        end       

            currentTraceInvGdG  =  zeros(1, numSampledParams);

    else   
       deriv_G = ...
                metricTensorDerivatives...
                (... 
                  sensitivities_1,   observedStates,...
                  sensitivities_2,   numSampledParams,...
                  currentNoise,      sampledParams,... 
                  priorThirdDerivative... 
                );

      [currentInvGdG,...
       currentTraceInvGdG]  = calcInvGdG_terms(currentInvG, deriv_G,...
                                               numSampledParams); 
    end % if  
    
    invGdG      = currentInvGdG;      
    traceInvGdG = currentTraceInvGdG;

end % if

current_LL   = calculate_LL( speciesEstimates, Y,... 
                             currentNoise,     observedStates...
                           );                     
                           

currentSampledParams       = sampledParams;
currentSpeciesEstimates    = speciesEstimates;
                                  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initialize constants and allocate arrays for Manifold MALA              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Set up accepted / rejected proposal counters
accepted  = 0;
attempted = 0;

% Allocate Histories, LL is for log likelihood
paramHistory        = zeros(numPosteriorSamples, numSampledParams);
LL_History          = zeros(numPosteriorSamples, numStates);
metricTensorHistory = cell(1, numPosteriorSamples);
trajectoryHistory   = zeros(numStates, numPosteriorSamples, numTimePoints);

% Set monitor rate for adapting step sizes
stepSizeMonitorRate = Model.stepSizeMonitorRate;   = 40;


% Allocate vector to store acceptance ratios
acceptanceRatios    = zeros(1, burnin +...
                            numPosteriorSamples);
% Converged to posterior
converged           = false;
% Set up converged flag
continueIterations  = true;
% Initialize iteration number
iterationNum        = 0;
                      
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%              RMHMC Algorithm to sample the parameters:                  %
%          All proposed parameters lack a 'Current' prefix                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

while continueIterations    
    
    iterationNum = iterationNum + 1; 
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Calculate Tensor information depending on iteration number %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    calculateTensor = mod(iterationNum, Model.tensorMonitorRate ) == 0;   
    
    attempted    = attempted    + 1; 
    
    disp(['Iteration:  '...
          num2str(iterationNum)]);    
    
    integrationError = false;     
       
    % sample new momentum from N(0, G(theta)) (affine transformation)
    currentProposedMomentum = chol(currentG) * randn(numSampledParams, 1);
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Calculate log(Hamiltonian) of the current parameters %
    %%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%
      
    % Calculate the log prior for current hyperparameter value
    currentLogPrior = zeros(1, numSampledParams);
    for p = 1: numSampledParams    
        currentLogPrior(p) = prior(sampledParam_idxs(p),...
                                   currentSampledParams(p));        
    end
    currentLogPrior = sum(currentLogPrior);  
                          
    % normalization constant in the Hamiltonian
    normalizationConstant = 0.5*( numSampledParams*log(2*pi) + ...
                                  2*log(prod(diag(chol(currentG))))...                                           
                                );
                                
    current_H = - (current_LL + currentLogPrior) + normalizationConstant +...
                   0.5*(currentProposedMomentum' * currentInvG * currentProposedMomentum);
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Update parameters with Leapfrog steps  %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % Randomize leapfrog steps
    randLeapFrogSteps         = ceil(rand * numLeapFrogSteps);
    
    for iStep = 1 : randLeapFrogSteps
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Update momentum by fractional step , p^{ 1 / n }  %
        %       Do this with fixed point iterations         % 
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        
        
        
        if Model.isHMC 
            proposedMomentumFrac = currentProposedMomentum + ...
                                   (stepSize / 2) * currentGrad_LL' ;
            
            newSampledParams = currentSampledParams + (stepSize / 2) * proposedMomentumFrac' ;
                                                      
                                              
            newParams        = updateTotalParameters( totalParams,...
                                                      newSampledParams,...
                                                      sampledParam_idxs); 
                               
        elseif calculateTensor             
            pm = currentProposedMomentum;            
            for iFixedPointIter = 1: maxFixedPointStepsMomentum     

                quadraticTerm = zeros(1, numSampledParams);
                for iParam = 1: numSampledParams
                    quadraticTerm(iParam)  = 0.5*( pm' * currentInvGdG{iParam} * currentInvG * pm) ;
                end

                % Note the transposes, these are column vectors
                pm = currentProposedMomentum + ...
                     (stepSize / 2) * (currentGrad_LL' - 0.5*currentTraceInvGdG' + quadraticTerm' );
            end % for (fixed point) 
            % Set momentum value to the final fixed point
            proposedMomentumFrac = pm;        

            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            % Update position, theta, using fixed point iterations                     %
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

            currentInvGMomentum = currentInvG * proposedMomentumFrac;
            newSampledParams    = currentSampledParams;
            fixedPoint_InvG     = currentInvG;        
        
        
            for iFixedPointIter = 1 : maxFixedPointStepsPosition

                invGMomentum    =   fixedPoint_InvG * proposedMomentumFrac;

                % PP is the fixed-point parameter approximation
                params_fixed    = newSampledParams + (stepSize / 2) * currentInvGMomentum' + ...
                                                     (stepSize / 2) * invGMomentum' ;

                total_params_fixed    = updateTotalParameters( totalParams,...
                                                               params_fixed,...
                                                               sampledParam_idxs);

                %%%%% Calculate Metric Tensor %%%%%

                % zero second order sensitivities because we only need sens_!
                zeroMetricTensorDerivs = true;

                [      ~        ,   ...
                 sensitivities_1,   ...
                       ~        ] = ...
                                    ...
                  getSensAndTrajectories...
                                        ...
                            ( sensitivityMethod,      zeroMetricTensorDerivs,...
                              equations,              equations_AD,            ...  
                              equationsSens,... 
                              initialValues,          initialValuesSens,       ...
                              timePoints,             numStates,               ...  
                              numSampledParams,       total_params_fixed,      ...
                              sampledParam_idxs,      epsilon                  ...                                 
                            );            

                try
                    G  = metricTensor(                                           ...
                                        params_fixed,       sensitivities_1,     ... 
                                        numSampledParams,   observedStates,      ... 
                                        currentNoise,       priorSecondDerivative...                              
                                     );

                    identity         = eye(numSampledParams);                                     
                    fixedPoint_InvG  = identity / (G + identity*1e-6);

                catch       
                    iterationNum     = iterationNum - 1;    
                    attempted        = attempted    - 1; 
                    integrationError = true; 
                    % redo current iteration step 
                    break;
                end % try  

            end % for (fixed point)
            
            invG     = fixedPoint_InvG;
            % catch integration error
            if integrationError, break; end
        
            % Set position and InvG to the final fixed point values
            newSampledParams = params_fixed; 
            newParams        = updateTotalParameters(totalParams,...
                                                     newSampledParams,...
                                                     sampledParam_idxs); 
        else
            
            cpm = currentProposedMomentum;
            for iParam = 1: numSampledParams
                    quadraticTerm(iParam)  = 0.5*( cpm' * currentInvGdG{iParam} * currentInvG * cpm);
            end
            
            proposedMomentumFrac = currentProposedMomentum + ...
                  (stepSize / 2) * (currentGrad_LL' - 0.5*currentTraceInvGdG' + quadraticTerm' );
            
            currentInvGMomentum = currentInvG * proposedMomentumFrac;
             
            newSampledParams = currentSampledParams + stepSize * currentInvGMomentum' ;     
            
            newParams        = updateTotalParameters( totalParams,...
                                                      newSampledParams,...
                                                      sampledParam_idxs); 
            
             
        end % if that decides between hmc / rmhmc 
                             
        
        % plot trajectories as proposed 
        if  plotProposedTrajectories
            for i = 1:numStates
                figure(i);
                hold on;
                plot(speciesEstimates(i, :));
            end % for
        end % if          
                                
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         % Calculate sensitivities, gradient and calculate metric tensor derivatives %
         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
           
         [trajectories,      ...
          sensitivities_1,   ...
          sensitivities_2] = ...
                                 ...
                  getSensAndTrajectories...
                                        ...
                            ( sensitivityMethod,      zeroMetricTensorDerivatives,...
                              equations,              equations_AD,...  
                              equationsSens,... 
                              initialValues,          initialValuesSens,          ...
                              timePoints,             numStates,                  ...  
                              numSampledParams,       newParams,                  ...
                              sampledParam_idxs,      epsilon                     ...                                 
                            );         


            speciesEstimates  = extractSpeciesTrajectories(trajectories,...
                                                           numStates);

            try
                gradient_LL = LL_Gradient(...
                                           newSampledParams,   sensitivities_1,... 
                                           numSampledParams,   observedStates,... 
                                           numTimePts,         speciesEstimates,... 
                                           Y,                  currentNoise,...
                                           priorDerivative...
                                         );
            catch       
                iterationNum     = iterationNum - 1;    
                attempted        = attempted    - 1; 
                integrationError = true;  
                % redo current iteration step 
                break;
            end % try        
        
         
         
        if Model.isHMC           
            G           = eye(numSampledParams);
            invG        = currentG;
            
            for k = 1: numSampledParams
                invGdG{k}    =  zeros(numSampledParams,...
                                      numSampledParams);
            end       

            traceInvGdG  =  zeros(1, numSampledParams);   
    
        elseif calculateTensor   
            

            if zeroMetricTensorDerivatives

                for k = 1: numSampledParams
                    invGdG{k}           =  zeros(numSampledParams,...
                                                 numSampledParams);
                end       

                    traceInvGdG         =  zeros(1, numSampledParams);

            else     
                deriv_G = ...
                         metricTensorDerivatives...
                          (... 
                            sensitivities_1,   observedStates,  ...
                            sensitivities_2,   numSampledParams, ...
                            currentNoise,      newSampledParams, ...  
                            priorThirdDerivative...
                          );  

             [invGdG, traceInvGdG]  = calcInvGdG_terms(invG, deriv_G,...
                                                       numSampledParams);   
            end % if     
            
        end
                              
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      %                 Update momentum by full leapfrog step                     %
      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
                 
        quadraticTerm = zeros(1, numSampledParams);
        for iParam = 1: numSampledParams
            quadraticTerm(iParam)  = 0.5*( proposedMomentumFrac' *...
                                           invGdG{iParam} * invG *...
                                           proposedMomentumFrac) ;
        end
        
        % Note the transposes, these are column vectors
        proposedMomentum = proposedMomentumFrac + ...
                            (stepSize / 2) * (gradient_LL' - 0.5*traceInvGdG' + quadraticTerm' );    
  
   % Ends the iteration over leapfrog steps  
   end % for
   
    % if integration error encountered continue while loop and reject proposed
    if integrationError, continue; end
    
    proposed_LL      = calculate_LL( speciesEstimates, Y,... 
                                     currentNoise,     observedStates...
                                   );      
  
    % Calculate the log prior for proposed parameter value   
    proposedLogPrior = zeros(1, numSampledParams);
    for p = 1: numSampledParams    
        proposedLogPrior(p) = prior(sampledParam_idxs(p),...
                                    newSampledParams(p));        
    end
    proposedLogPrior = sum(proposedLogPrior);                                
   
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Calculate log(Hamiltonian) of the proposed parameters %
    %%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % normalization constant in the Hamiltonian 
    normalizationConstant = 0.5*(numSampledParams*log(2*pi) + ...
                                 2*log(prod(diag(chol(G))))...
                                );
    
    proposed_H = - (proposed_LL + proposedLogPrior) + normalizationConstant +...
                    0.5*(proposedMomentum' * invG * proposedMomentum);                  
                   
    
    % Accept according to ratio of log probabilities
    ratio      =   current_H - proposed_H;
      
        
    if ratio > 0 || log(rand) < min(0, ratio)
        % Accept proposal
        % Update variables        
        accepted                   = accepted + 1;
        
        currentParams              = newParams;
        currentSampledParams       = newSampledParams;
        current_LL                 = proposed_LL;            
        currentG                   = G;
        currentInvG                = invG;
        currentInvGdG              = invGdG; 
        currentTraceInvGdG         = traceInvGdG;  
        currentSpeciesEstimates    = speciesEstimates;
                   
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Display statistics and plots in Real time %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
    
    % Keep track of acceptance ratios at each iteration number
    acceptanceRatio                = 100*accepted / attempted;
    acceptanceRatios(iterationNum) = acceptanceRatio; 
    
    disp(['acceptance probability:  ' num2str(ratio) ]);    
    disp(['acceptance ratio:  '       num2str(100*accepted / attempted) ]);
    disp(['Parameters:  '             num2str(newSampledParams) ]);
    
    
    figStart = numStates + 1;
    figEnd   = figStart + numSampledParams;    
    plotTraces(currentSampledParams, ...
               figStart: figEnd,...
               iterationNum);
    
    cp = currentSampledParams;   
    paramPairs = {... 
                   [cp(1) cp(2)],... 
                   [cp(1) cp(3)],...
                   [cp(2) cp(3)] ...
                 };    
    figStart = figEnd + 1;
    figEnd   = figStart + length(paramPairs);               
    plot_2D_Slice( paramPairs, ...
                   figStart: figEnd...
                 );
    
    paramTriples = {... 
                     [cp(1) cp(2) cp(3)],...                      
                   }; 
                     
    figStart = figEnd + 1;
    figEnd   = figStart + length(paramTriples);
    plot_3D_Slice( paramTriples, ...
                   figStart: figEnd...
                 );
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Save parameters, LL, metric tensors and trajectories %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if converged
        
        posteriorSampleNum = iterationNum -... 
                             burnin;
        
        paramHistory(posteriorSampleNum, :)        = currentSampledParams;
        LL_History(posteriorSampleNum, :)          = current_LL;        
        metricTensorHistory{posteriorSampleNum}    = currentG;
        
        for state = 1: numStates        
            trajectoryHistory(state, posteriorSampleNum, :) = currentSpeciesEstimates(state, :);             
        end        
        
        if iterationNum == burnin + numPosteriorSamples
            % N Posterior samples have been collected so stop
            continueIterations = false;
        end     
        

    else        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Adjust step size based on acceptance ratio  %
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        
        
        if mod(iterationNum, monitorRate) == 0            
            minAccept = stepSizeRange(1); 
            maxAccept = stepSizeRange(2);
            % amount to increase/decrease step size 
            % to alter acceptance ratio 
            dec       = 0.05; % Note: this should be based on acceptanceRatio - minAccept
            assert(stepSize > 0);            
            
            if     acceptanceRatio < minAccept
                       stepSize = stepSize  - dec;
            elseif acceptanceRatio > maxAccept  
                % Steps are too small, so increase them a bit
                       stepSize = stepSize  + dec;                         
            end % if   
            
              if Model.isHMC
                if stepSize < .05 
                   stepSize = .05;
                elseif stepSize > 1
                    stepSize = 1;
                end
             else                
                if stepSize < .6 
                   stepSize = .6;
                elseif stepSize > 1.5
                    stepSize = 1.5;
                end
             end % if
            
            disp('%%%%');
            disp(['step size: ' num2str(stepSize) ]);
            disp('%%%%');
                                 
        end % if            
        
        % Change converged tab if burn-in complete
            
        if iterationNum == burnin          
            converged  = true;    
            % End burn-in-samples timer: Get time it took to sample Burn-In
            burnInTime = toc;
            % Begin posterior samples timer: Restart timer to get time for collecting posterior samples
            tic;            
        end % if        
        
    end % if
     
end % while

% End posterior samples timer: Time to collect Posterior Samples
posteriorTime = toc;

% Save posterior
fileName = [ 'RMHMC'...
             '_'... 
             equationName...              
           ];

save(  ['./Results/' fileName],... 
       'paramHistory',... 
       'metricTensorHistory',... 
       'LL_History',... 
       'burnInTime',... 
       'posteriorTime',... 
       'Y',... 
       'timePoints',...
       'acceptanceRatios',...
       'trajectoryHistory',...
       'stepSize'...
    );


end % main function


